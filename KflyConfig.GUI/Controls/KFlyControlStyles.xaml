<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:kfly="clr-namespace:KFly.GUI"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
                    >
    <!-- style for WP7/Circle button -->
    <kfly:MathConverter x:Key="MathConverter"/>
    
    <Style x:Key="KFlyCircleButtonStyle"
           TargetType="{x:Type kfly:KFlyCircleButton}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource MetroCircleButtonFocusVisual}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type kfly:KFlyCircleButton}">
                    
                    <Grid>
                        <Ellipse Fill="{TemplateBinding Background}"
                                 Margin="4"
                                 StrokeThickness="0" />
                        <Ellipse x:Name="ellipse"
                                 Margin="4"
                                 Stroke="{DynamicResource GrayBrush2}"
                                 StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}" />
                        <Ellipse x:Name="ellipsebg"
                                 RenderTransformOrigin="0.5,0.5"
                                 Fill="{DynamicResource AccentColorBrush}"
                                 Margin="4"
                                 StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="ellipsebgscale" ScaleX="0" ScaleY="0"/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                       <Rectangle x:Name="icon" RenderTransformOrigin="0.5,0.5" Fill="{DynamicResource  GrayBrush2}">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0.4" ScaleY="0.4"/>
                                        <RotateTransform x:Name="iconRotate" Angle="360" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Fill" Visual="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=Icon}" />
                                </Rectangle.OpacityMask>
                        </Rectangle>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="RotateStates">
                                <VisualState x:Name="Rotating">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation Storyboard.TargetName="iconRotate"
                                                         Storyboard.TargetProperty="Angle"
                                                         From="0"
                                                         To="360" 
                                                         Duration="0:0:3"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Still">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="iconRotate"
                                                         Storyboard.TargetProperty="Angle"
                                                         To="360" 
                                                         Duration="0:0:0.5"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="icon" Property="Fill"
                                    Value="White" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                       <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         From="0"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                        <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         From="0"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <!-- some out fading -->
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="0"
                                                         Duration="0:0:0.1" />
                                        <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="0"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="ellipsebg" Property="Fill"
                                    Value="{StaticResource HighlightBrush}" />
                            <Setter TargetName="icon" Property="Fill"
                                    Value="White" />
                        </Trigger>
                       
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="KFlyCircleToggleButtonStyle"
           TargetType="{x:Type kfly:KFlyCircleToggleButton}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource MetroCircleButtonFocusVisual}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type kfly:KFlyCircleToggleButton}">

                    <Grid>
                        <Ellipse Fill="{TemplateBinding Background}"
                                 Margin="4"
                                 StrokeThickness="0" />
                        <Ellipse x:Name="ellipse"
                                 Margin="4"
                                 Stroke="{DynamicResource GrayBrush2}"
                                 StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}" />
                        <Ellipse x:Name="ellipsebg"
                                 RenderTransformOrigin="0.5,0.5"
                                 Fill="{DynamicResource AccentColorBrush}"
                                 Margin="4"
                                 StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="ellipsebgscale" ScaleX="0" ScaleY="0"/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <Rectangle x:Name="icon" RenderTransformOrigin="0.5,0.5" Fill="{DynamicResource  GrayBrush2}">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.4" ScaleY="0.4"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                            <Rectangle.OpacityMask>
                                <VisualBrush Stretch="Fill"  Visual="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=CheckedIcon}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                            <Setter TargetName="icon" Property="OpacityMask">
                                <Setter.Value>
                                    <VisualBrush Stretch="Fill"  Visual="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=CheckedIcon}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="False">
                            <Setter TargetName="icon" Property="OpacityMask">
                                <Setter.Value>
                                    <VisualBrush Stretch="Fill"  Visual="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=UncheckedIcon}" />
                                </Setter.Value>                  
                            </Setter>
                       </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="icon" Property="Fill"
                                    Value="White" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         From="0"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                        <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         From="0"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <!-- some out fading -->
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="0"
                                                         Duration="0:0:0.1" />
                                        <DoubleAnimation Storyboard.TargetName="ellipsebgscale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="0"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="ellipsebg" Property="Fill"
                                    Value="{StaticResource HighlightBrush}" />
                            <Setter TargetName="icon" Property="Fill"
                                    Value="White" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="KFlyTabStyle" TargetType="{x:Type kfly:KFlyTab}">
        <Setter Property="Background"
                Value="White" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type kfly:KFlyTab}">
                    <DockPanel LastChildFill="True" HorizontalAlignment="Stretch">
                        <Rectangle DockPanel.Dock="Left" Fill="{DynamicResource AccentColorBrush}" Margin="0,6,0,6" Width="3" VerticalAlignment="Stretch" />
                        <DockPanel Margin="5,5,5,5" LastChildFill="True" HorizontalAlignment="Stretch">
                            <DockPanel DockPanel.Dock="Top" LastChildFill="False" VerticalAlignment="Center">
                                <Label Content="{TemplateBinding Title}" FontSize="22" HorizontalAlignment="Left" VerticalAlignment="Center" />
                                <ContentPresenter Name="PART_Toolbar" Content="{TemplateBinding Toolbar}" DockPanel.Dock="Right"></ContentPresenter>
                            </DockPanel>
                            <Separator DockPanel.Dock="Top"/>
                            <kfly:ModalContentPresenter Name="PART_NotConnectedModal">
                                <Grid>
                                    <Image Opacity="0.2" Stretch="None" Source="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BackgroundImage}" HorizontalAlignment="Right" VerticalAlignment="Bottom">
                                        <Image.OpacityMask>
                                            <LinearGradientBrush StartPoint="0.1,0.1" EndPoint="0.7,0.7">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStop Offset="0" Color="Transparent"/>
                                                    <GradientStop Offset="1" Color="Black"/>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Image.OpacityMask>
                                    </Image>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                        <ContentPresenter Content="{TemplateBinding Content}"></ContentPresenter>
                                    </ScrollViewer>
                                </Grid>
                                <kfly:ModalContentPresenter.ModalContent>
                                    <kfly:ModalNotConnected/>
                                </kfly:ModalContentPresenter.ModalContent>
                            </kfly:ModalContentPresenter>

                        </DockPanel>
                    </DockPanel>
                    <ControlTemplate.Triggers>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RedSquareButtonStyle"
           TargetType="{x:Type Button}">
        <Setter Property="MinHeight"
                Value="25" />
        <Setter Property="FontFamily"
                Value="{DynamicResource DefaultFont}" />
        <Setter Property="FontWeight"
                Value="SemiBold" />
        <Setter Property="Background"
                Value="{DynamicResource GrayBrush10}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource BlackBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="Padding"
                Value="5,6" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="MouseOverBorder">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)"
                                                                          Storyboard.TargetName="MouseOverBorder">
                                            <EasingThicknessKeyFrame KeyTime="0"
                                                                     Value="2" />
                                        </ThicknessAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="PressedBorder">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)"
                                                                          Storyboard.TargetName="MouseOverBorder">
                                            <EasingThicknessKeyFrame KeyTime="0"
                                                                     Value="0" />
                                        </ThicknessAnimationUsingKeyFrames>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)"
                                                                          Storyboard.TargetName="PressedBorder">
                                            <EasingThicknessKeyFrame KeyTime="0"
                                                                     Value="2" />
                                        </ThicknessAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                                                                       Storyboard.TargetName="DisabledVisualElement">
                                            <SplineDoubleKeyFrame KeyTime="0"
                                                                  Value="0.7" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidFocused" />
                                <VisualState x:Name="InvalidUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background"
                                BorderBrush="{DynamicResource BlackBrush}"
                                BorderThickness="2"
                                Background="Red" />
                        <Rectangle x:Name="DisabledVisualElement"
                                   Fill="{DynamicResource ControlsDisabledBrush}"
                                   IsHitTestVisible="false"
                                   Opacity="0" />
                        <Border x:Name="MouseOverBorder"
                                Background="{DynamicResource GrayBrush8}"
                                Opacity="0" />
                        <Border x:Name="PressedBorder"
                                Background="{DynamicResource BlackBrush}"
                                Opacity="0"
                                BorderBrush="{DynamicResource BlackBrush}" />
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content, Converter={StaticResource ToLowerConverter}}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          OpacityMask="{x:Null}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource WhiteBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AccentedSquareButtonStyle"
           TargetType="{x:Type Button}">
        <Setter Property="MinHeight"
                Value="25" />
        <Setter Property="FontFamily"
                Value="{DynamicResource DefaultFont}" />
        <Setter Property="FontWeight"
                Value="SemiBold" />
        <Setter Property="Background"
                Value="{DynamicResource GrayBrush10}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource BlackBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="Padding"
                Value="5,6" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="MouseOverBorder">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)"
                                                                          Storyboard.TargetName="MouseOverBorder">
                                            <EasingThicknessKeyFrame KeyTime="0"
                                                                     Value="2" />
                                        </ThicknessAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="PressedBorder">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)"
                                                                          Storyboard.TargetName="MouseOverBorder">
                                            <EasingThicknessKeyFrame KeyTime="0"
                                                                     Value="0" />
                                        </ThicknessAnimationUsingKeyFrames>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)"
                                                                          Storyboard.TargetName="PressedBorder">
                                            <EasingThicknessKeyFrame KeyTime="0"
                                                                     Value="2" />
                                        </ThicknessAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                                                                       Storyboard.TargetName="DisabledVisualElement">
                                            <SplineDoubleKeyFrame KeyTime="0"
                                                                  Value="0.7" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidFocused" />
                                <VisualState x:Name="InvalidUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background"
                                BorderBrush="{DynamicResource BlackBrush}"
                                BorderThickness="2"
                                Background="{DynamicResource AccentColorBrush}" />
                        <Rectangle x:Name="DisabledVisualElement"
                                   Fill="{DynamicResource ControlsDisabledBrush}"
                                   IsHitTestVisible="false"
                                   Opacity="0" />
                        <Border x:Name="MouseOverBorder"
                                Background="{DynamicResource GrayBrush8}"
                                Opacity="0" />
                        <Border x:Name="PressedBorder"
                                Background="{DynamicResource BlackBrush}"
                                Opacity="0"
                                BorderBrush="{DynamicResource BlackBrush}" />
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          OpacityMask="{x:Null}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource WhiteBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GlowingGroupBox" BasedOn="{StaticResource MetroGroupBox}"   
           TargetType="{x:Type GroupBox}">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0"
                                      Color="Black"
                                      Opacity="0"
                                      BlurRadius="2"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                <BeginStoryboard>
                    <Storyboard AutoReverse="True">
                        <DoubleAnimation From="0" To="1.0"
                            Storyboard.TargetProperty="(Effect).Opacity"
                            Duration="00:00:0.3"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="MetroGroupBox"
           TargetType="{x:Type GroupBox}">
        <Setter Property="Margin"
                Value="5" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="Foreground"
                Value="{DynamicResource BlackBrush}" />
        <Setter Property="Background"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Controls:ControlsHelper.HeaderFontSize"
                Value="{DynamicResource ContentFontSize}" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type GroupBox}}, Path=Header, Mode=OneWay}">
                        <TextElement.Foreground>
                            <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}"
                                         Path="Background"
                                         Mode="OneWay" />
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}"
                                         Path="(Controls:ControlsHelper.GroupBoxHeaderForeground)"
                                         Mode="OneWay" />
                            </MultiBinding>
                        </TextElement.Foreground>
                    </ContentPresenter>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid x:Name="GroupBoxRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              TextElement.FontSize="{TemplateBinding Controls:ControlsHelper.HeaderFontSize}"
                                              TextElement.FontStretch="{TemplateBinding Controls:ControlsHelper.HeaderFontStretch}"
                                              TextElement.FontWeight="{TemplateBinding Controls:ControlsHelper.HeaderFontWeight}"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True" />
                        </Border>
                        <Border Grid.Row="1"
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,0,1,1">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Cursor="{TemplateBinding Cursor}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default styles -->
    <Style TargetType="kfly:KFlyCircleButton" BasedOn="{StaticResource KFlyCircleButtonStyle}" />
    <Style TargetType="kfly:KFlyCircleToggleButton" BasedOn="{StaticResource KFlyCircleToggleButtonStyle}" />
    <Style TargetType="kfly:KFlyTab" BasedOn="{StaticResource KFlyTabStyle}" />
    <Style TargetType="GroupBox" BasedOn="{StaticResource MetroGroupBox}" />

</ResourceDictionary>